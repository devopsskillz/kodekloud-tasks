- name: Install necessary packages
  yum:
    name: firewalld
    state: present
    update_cache: yes

- name: Restart necessary services
  service:
    name: "{{ item }}"
    state: restarted
  loop: ['dbus', 'systemd-logind']

- name: Start and enable necessary services
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop: ['firewalld', 'httpd', 'nginx']

- name: Get Apache and Nginx ports
  shell: ss -ntlp | grep '{{ item }}' | awk '{print $4}' | sed -e 's/.*://' | head -1
  loop: ['nginx', 'httpd']
  register: port

# setting port vars to stdouts from above task
- name: Set Apache and Nginx ports vars
  set_fact:
    "{{ item.0 }}_port": "{{ item.1 }}"
  loop: "{{ ['nginx', 'apache'] | zip(port.results | map(attribute='stdout') | list) | list }}"

- name: Allow incoming on Nginx port
  firewalld:
    port: "{{ nginx_port }}/tcp"
    zone: public
    permanent: yes
    immediate: yes
    state: enabled

- name: Get LB credentials and host address
  set_fact:
    "{{ item.0 }}": "{{ groups['balancer'] | map('extract', hostvars, [item.1]) | first }}"
  loop: "{{ ['lb_user', 'lb_pass', 'lb_host'] | zip(['ansible_user', 'ansible_ssh_pass', 'ansible_host']) | list }}"

- name: Allow incoming from LB host on Apache port
  firewalld:
    rich_rule: "rule family=ipv4 source address={{ lb_host }} port protocol=tcp port={{ apache_port }} accept"
    zone: public
    permanent: yes
    immediate: yes
    state: enabled

- name: Test Nginx's and Apache's ports
  wait_for:
    host: "{{ ansible_host }}"
    port: "{{ item.port }}"
    delay: 3
    state: "{{ item.state }}"
    timeout: 5
    vars:
      ansible_connection: local
      ansible_become: no      
  loop:
    - { port: "{{ nginx_port | int }}", state: "started" }
    - { port: "{{ apache_port | int }}", state: "stopped" }

# testing port from host with missing sudo
- name: Test Apache port from LB host
  shell: >
    sshpass -p '{{ lb_pass }}' ssh -o StrictHostKeyChecking=no '{{ lb_user + '@' + lb_host }}'
    'echo exit | telnet {{ ansible_host }} {{ apache_port }}'
  vars:
    ansible_connection: local
    ansible_become: no  
  register: result
  failed_when: '"Connected to" not in result.stdout'
